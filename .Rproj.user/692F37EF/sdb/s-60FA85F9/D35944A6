{
    "collab_server" : "",
    "contents" : "#### Repeated Measures ANOVA with orthogonal polynomial contrasts\n\n\n### Preparations\n\n## Clear workspace\n\nrm(list = ls())   \n\n## Install required packages \n\n#install.packages(\"plyr\")\n#install.packages(\"reshape\")\nlibrary(plyr)\nlibrary(\"reshape\")\n\n## Check resp. set working directory\n\ngetwd()\nsetwd(\"D:\\\\Uni\\\\Statistik\\\\1. Semester\\\\Statistical_Programming\\\\Project)\n\n\n### Read data\n\n## Required format: Tab sep., comma as decimal mark, first row are the col. names, wide format, ordered equidistant Factor levels\n\nRT_wide = read.table(\"Daten_R_RT.txt\", header = TRUE, dec = \",\", sep = \"\\t\")\n#ER_wide = read.table(\"Daten_R_ER.txt\", header = TRUE, dec = \",\", sep = \"\\t\")\n\nstr(RT_wide)\n#str(ER_wide)\n\n\n### Define some variables\n\n## 'n' is the number of enteties \n\nn = length(RT_wide[,1])\nn = as.numeric(n)\n\n\n## Convert to long format\n\n## 'id' are the enteties, which are measured repeadetly\n## 'measured' are the different measurement conditions\n\nRT_long = melt(RT_wide,\n               id = \"ID\",\n               measured = c(\"Messung_1\", \"Messung_2\", \"Messung_3\", \"Messung_4\", \"Messung_5\",\t\n                            \"Messung_6\", \"Messung_7\", \"Messung_8\", \"Messung_9\"))\n#ER_long = melt(ER_wide,\n#               id = \"ID\",\n#               measured = c(\"Messung_1\", \"Messung_2\", \"Messung_3\", \"Messung_4\", \"Messung_5\",\t\n#                            \"Messung_6\", \"Messung_7\", \"Messung_8\", \"Messung_9\"))\n\n\n## 'RT' is here the name of the dependend variable\n\ncolnames(RT_long) = c(\"ID\", \"Messung\", \"RT\")\n#colnames(ER_long) = c(\"ID\", \"Messung\", \"ER\")\n\n\n## 'k' is the number of factor levels\n\nk = nlevels(RT_long$Messung)\nk = as.numeric(k)\n\n\n## 'Flm' are the factor level means\n\nFlm = tapply(RT_long$RT, RT_long$Messung, mean)\n\n\n## 'Gm' is the General Mean\n\nGm = mean(RT_long$RT)\n\n\n## 'Em' is the Entety mean\n\nEm = tapply(RT_long$RT, RT_long$ID, mean)\n\n\n## 'Me' Measurements\n\nMe = (1:k)\n\n\n## Make Levels numeric (in case they aint already)\n\nlevels(RT_long$Messung) = (1:9)\nRT_long$Messung = as.numeric(levels(RT_long$Messung))[RT_long$Messung]\n\nstr(RT_long)\n\n\n## Means of each measurement condition ('MeFlm' dataframe)\n\nMeFlm = data.frame(Me, Flm)\nMeFlmlong = MeFlm[rep(seq_len(nrow(MeFlm)), each = n),]\n\n## 'E' Entedties\n\nE = (1:n)\n\n\n## Means of each measurement condition ('EEm')\n\nEEm = data.frame(E, Em)\nEEmlong = EEm[rep(seq_len(nrow(EEm)), k), ]\n\n\n### Repeated Measures ANOVA\n\n\n\n\n### Sphericity (Mauchly-Test, Correction of degrees of Freedom)\n\n\n\n\n### Plotting of 95% Confidence Intervalls\n\n\n## Computing 95% CI\n\n## Because we want a 95% CI the confidence level variable 'Clevel' is set to 0.95\n\nClevel = 0.05\n\ncf = sqrt(k / (k - 1))\n\nAdjVal = data.frame(Adj = (cf * ((RT_long$RT - EEmlong$Em + Gm) - MeFlmlong$Flm)) + MeFlmlong$Flm)\n\nRT_long_adj = cbind.data.frame(RT_long, AdjVal)\n\n#SD_adj = tapply(RT_long_adj$Adj, RT_long_adj$Messung, sd)\nSE_adj = (tapply(RT_long_adj$Adj, RT_long_adj$Messung, sd) / sqrt(n))\n\nCIdist = abs(qt(Clevel/2, (n - 1))) * SE_adj\n\n\n## Plot of condtional means with CI error bars\n\nbarends = 0.05\n\nplot(MeFlm, ylim = c(min((MeFlm$Flm - CIdist)), max((MeFlm$Flm + CIdist))))\n\n\nfor(i in 1:k) {\n      up = MeFlm$Flm[i] + CIdist[i]\n      low = MeFlm$Flm[i] - CIdist[i]\n      segments(MeFlm$Me[i],low , MeFlm$Me[i], up)\n      segments(MeFlm$Me[i]-barends, up , MeFlm$Me[i]+barends, up)\n      segments(MeFlm$Me[i]-barends, low , MeFlm$Me[i]+barends, low)\n}\n\n# !!! Auch hier muesste der Plot noch verschoenert werden \n\n# !!! alternative... habs aber nicht hinbekommen fuer verschiedene CI pro mean\n\n#segments(MeFlm$Me, MeFlm$Flm - CIdist, MeFlm$Me, MeFlm$Flm + CIdist)\n#segments(MeFlm$Me - barends, MeFlm$Flm - CIdist, MeFlm$Me + barends, MeFlm$Flm - CIdist)\n#segments(MeFlm$Me - barends, MeFlm$Flm + CIdist, MeFlm$Me + barends, MeFlm$Flm + CIdist)\n\n\n### Orthogonal polynomial Contrasts\n\n## Defining Contrast weights\n\n\n\n\n\n### Orthogonal polynomial Contrasts as polynomial regression\n\n## 'maxpoly' is the maximal polynomial degree for orthogonal polynomials\n\nmaxpoly = k - 1\n\n\n## Fitting the k - 1 orthogonal Polynomials\n\nfor(i in 1:maxpoly){\n      pfv = paste(\"poly.fit.\", i, sep = \"\")\n      assign(pfv, lm(RT_long$RT ~ poly(RT_long$Messung, degree = i, raw = FALSE)))\n      poly.fit.max = lm(RT_long$RT ~ poly(RT_long$Messung, degree = i, raw = FALSE))\n}\n\n\n## Summary\nsummary(poly.fit.max)\n# !!! irgendwie sollten moeglichst summarys und plots fuer alle orthogonalen polynomialen trends ausgegeben werden...\n\n\n## Plotting the Predictions                                       \n# !!! das sollten eigentlich smooth lines sein... und nicht die Predictions fuer die einzelnen Levels verbunden mit linien...  \n\nplot(RT_long$Messung, RT_long$RT, main = \"Plot\")                  \n# !!! plot koennte noch verschoenert werden (Tietel, Beschriftung, Farben, etc.)\nfor(i in 1:maxpoly){\n      lines(smooth.spline(RT_long$Messung, predict(lm(RT_long$RT ~ poly(RT_long$Messung, degree = i, raw = FALSE)))), col = i, lwd = 2)\n}\n\n\n## Fitting the k - 1 orthogonal Polynomials to the means\n# !!! wo liegen die unterschiede zwischen dem fitting zu den kompletten daten und zu den means?\n\nfor(i in 1:maxpoly){\n  pfv = paste(\"poly.fit.\", i, sep = \"\")\n  assign(pfv, lm(MeFlm$Flm ~ poly(MeFlm$Me, degree = i, raw = FALSE)))\n  poly.fit.max = lm(MeFlm$Flm ~ poly(MeFlm$Me, degree = i, raw = FALSE))\n}\n\n\n## Summary\n\nsummary(poly.fit.max)\n\n\n## Plotting the Predictions\n\nplot(MeFlm)\nfor(i in 1:maxpoly){\n  lines(smooth.spline(MeFlm$Me, predict(lm(MeFlm$Flm ~ poly(MeFlm$Me, degree = i, raw = FALSE)))), col = i, lwd = 2)\n}\n\n\n\n\n",
    "created" : 1479674718298.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4012952441",
    "id" : "D35944A6",
    "lastKnownWriteTime" : 1479738777,
    "last_content_update" : 1479738777252,
    "path" : "D:/Uni/Statistik/1. Semester/Statistical_Programming/Project/RP_Anova_STPL/RP_Anova_STPL/RMANOVA_6.R",
    "project_path" : "RMANOVA_6.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}